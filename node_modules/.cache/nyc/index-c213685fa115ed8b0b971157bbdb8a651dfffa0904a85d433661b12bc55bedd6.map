{"version":3,"file":"/home/usuario/Desktop/ull-esit-inf-dsi-23-24-prct06-generics-solid-alu0101413938/src/index.ts","sources":["/home/usuario/Desktop/ull-esit-inf-dsi-23-24-prct06-generics-solid-alu0101413938/src/index.ts"],"names":[],"mappings":";;;AAqBA,uHAAuH;AACvH,uHAAuH;AACvH,6GAA6G;AAC7G,oEAAoE;AACpE;;;GAGG;AACH,MAAe,oBAAoB;IACjC,YAAsB,KAAU;QAAV,UAAK,GAAL,KAAK,CAAK;IAChC,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,OAAU;QAChB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC1B,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAA;IACnB,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,GAAM;QACf,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACzC,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAA;IAC1B,CAAC;CAGF;AAED,0HAA0H;AAC1H,0HAA0H;AAC1H,yHAAyH;AACzH,gIAAgI;AAChI,4FAA4F;AAC5F;;;GAGG;AACH,MAAa,2BAA4B,SAAQ,oBAA4B;IAC3E,YAAY,OAAiB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAA;IAChB,CAAC;IACD;;;;OAIG;IACH,MAAM,CAAC,IAAY;QACjB,MAAM,MAAM,GAAa,EAAE,CAAA;QAC3B,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAChC,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;gBACpB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACtB,CAAC;QACH,CAAC,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AAnBD,kEAmBC;AAED;;;GAGG;AACH,MAAa,0BAA2B,SAAQ,oBAA4B;IAC1E,YAAY,KAAe;QACzB,KAAK,CAAC,KAAK,CAAC,CAAA;IACd,CAAC;IACD;;;;OAIG;IACH,MAAM,CAAC,IAAY;QACjB,MAAM,MAAM,GAAa,EAAE,CAAA;QAC3B,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAChC,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC3B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACtB,CAAC;QACH,CAAC,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AAnBD,gEAmBC;AAED,MAAM,uBAAuB,GAA+B,IAAI,0BAA0B,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAA;AACtH,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC","sourcesContent":["// Implemente una interfaz genérica 'Collectable' con los siguientes métodos,\n// los cuales deberá definir toda clase que quiera implementar dicha interfaz: addItem, getItems(), removeItem, getNumberOfItems.\n/**\n * Interfaz generiga Collectable<T>\n * Metodos: addItem, getItems(), removeItem, getNumberOfItem\n */\ninterface Collectable<T> {\n  addItem(item :T) :void\n  getItems() :T[]\n  removeItem(key :T) :void\n  getNumberOfItem() :number\n}\n// Implemente una interfaz genérica 'Searchable' con los siguientes métodos, los cuales deberá definir toda clase que desee\n// implementar dicha interfaz: search. Este método recibirá un término de búsqueda cuyo tipo no se conoce a priori.\n/**\n * Interfaz generica Searchable<T>\n * Metodos: search\n */\ninterface Searchable<T> {\n  search(item :T) :T[]\n}\n// Implemente una clase abstracta genérica 'SearchableCollection' que implemente las interfaces genéricas 'Collectable'\n// y 'Searchable'. Tenga en cuenta que en este punto deberá implementar todos los metodos de la interfaz 'Collectable',\n// mientras que el método search de 'Searchable' será abstracto, de modo que aquellas clases que extiendan a \n// 'SearchableCollection' tengan que implementarlo obligatoriamente.\n/**\n * Clase abstracta que implementa las interfaces Collectable y Searchable\n * Metodos: addItem, removeItem, getNumberOfItem\n */\nabstract class SearchableCollection<T> implements Collectable<T>, Searchable<T> {\n  constructor(protected items: T[]) {\n  }\n  \n  /**\n   * Permite añadir items\n   * @param newItem item nuevo el cual se va a añadir\n   */\n  addItem(newItem :T): void {\n    this.items.push(newItem)\n  }\n\n  /**\n   * Metodo que permite obtener el array de items\n   * @returns devuelve el array de items\n   */\n  getItems(): T[] {\n    return this.items \n  }\n\n  /**\n   * Permite eliminar un item dado un indice\n   * @param key indice que hace referencia a una posicion del indice\n   */\n  removeItem(key :T): void {\n    const index = this.items.indexOf(key, 0);\n    if (index > -1) {\n      this.items.splice(index, 1);\n    }\n  }\n\n  /**\n   * Permite obtener la cantidad de items del array\n   * @returns devuelve la cantidad de items\n   */\n  getNumberOfItem(): number {\n    return this.items.length\n  }\n\n  abstract search(item: T): T[]\n}\n\n// Extienda la clase abstracta genérica 'SearchableCollection' escribiendo dos subclases: 'NumericSearchableCollection' y \n// 'StringSearchableCollection'. La primera deberá modelar una colección de elementos numéricos en la que el método search\n// deberá poder buscar un número concreto y devolverá un array con todas las ocurrencias de dicho número en la colección.\n// La segunda deberá modelar una colección de cadenas de caracteres en la que el método search deberá poder buscar una subcadena\n// y devolverá un array con todas las cadenas de la colección que contengan dicha subcadena.\n/**\n * Clase NumericSearchableCollection que extiende la clase abstracta SearchableCollection\n * Implementa el metodo search para numbers\n */\nexport class NumericSearchableCollection extends SearchableCollection<number> {\n  constructor(numbers :number[]) {\n    super(numbers)\n  }\n  /**\n   * Permite buscar un numero del array\n   * @param item numero el cual se desea buscar\n   * @returns devuelve las numeros que coinciden\n   */\n  search(item: number): number[] {\n    const result :number[] = []\n    this.getItems().forEach(element => {\n      if (element == item) {\n        console.log(element);\n        result.push(element)\n      }\n    })\n    return result\n  }\n}\n\n/**\n * Clase StringSearchableCollection que extiende la clase abstracta SearchableCollection\n * Implementa el metodo search numbers\n */\nexport class StringSearchableCollection extends SearchableCollection<string> {\n  constructor(words :string[]) {\n    super(words)\n  }\n  /**\n   * Permite buscar todas las cadenas que concuerden con la subcadena\n   * @param item subcadena para buscar\n   * @returns devuelve las cadenas que coinciden\n   */\n  search(item: string): string[] {\n    const result :string[] = []\n    this.getItems().forEach(element => {\n      if (element.includes(item)) {\n        console.log(element);\n        result.push(element)\n      }\n    })\n    return result\n  }\n}\n\nconst strSearchableCollection :StringSearchableCollection = new StringSearchableCollection([\"hola\", \"volar\", \"adios\"]) \nconsole.log(strSearchableCollection.search(\"ola\"));\n\n"]}