"use strict";function cov_18cin31i6j(){var path="/home/usuario/Desktop/ull-esit-inf-dsi-23-24-prct06-generics-solid-alu0101413938/src/index.ts";var hash="86aeca44f00323d80eed1ffcb5c7ac52bb328249";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/usuario/Desktop/ull-esit-inf-dsi-23-24-prct06-generics-solid-alu0101413938/src/index.ts",statementMap:{"0":{start:{line:2,column:0},end:{line:2,column:62}},"1":{start:{line:3,column:0},end:{line:3,column:82}},"2":{start:{line:14,column:8},end:{line:14,column:27}},"3":{start:{line:21,column:8},end:{line:21,column:33}},"4":{start:{line:28,column:8},end:{line:28,column:26}},"5":{start:{line:35,column:22},end:{line:35,column:48}},"6":{start:{line:36,column:8},end:{line:40,column:55}},"7":{start:{line:37,column:12},end:{line:37,column:40}},"8":{start:{line:40,column:12},end:{line:40,column:55}},"9":{start:{line:47,column:8},end:{line:47,column:33}},"10":{start:{line:61,column:8},end:{line:61,column:23}},"11":{start:{line:69,column:23},end:{line:69,column:25}},"12":{start:{line:70,column:8},end:{line:75,column:11}},"13":{start:{line:71,column:12},end:{line:74,column:13}},"14":{start:{line:72,column:16},end:{line:72,column:37}},"15":{start:{line:73,column:16},end:{line:73,column:37}},"16":{start:{line:76,column:8},end:{line:76,column:22}},"17":{start:{line:79,column:0},end:{line:79,column:66}},"18":{start:{line:86,column:8},end:{line:86,column:21}},"19":{start:{line:94,column:23},end:{line:94,column:25}},"20":{start:{line:95,column:8},end:{line:100,column:11}},"21":{start:{line:96,column:12},end:{line:99,column:13}},"22":{start:{line:97,column:16},end:{line:97,column:37}},"23":{start:{line:98,column:16},end:{line:98,column:37}},"24":{start:{line:101,column:8},end:{line:101,column:22}},"25":{start:{line:104,column:0},end:{line:104,column:64}},"26":{start:{line:105,column:32},end:{line:105,column:90}},"27":{start:{line:106,column:0},end:{line:106,column:51}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:4},end:{line:13,column:5}},loc:{start:{line:13,column:23},end:{line:15,column:5}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:4},end:{line:20,column:5}},loc:{start:{line:20,column:21},end:{line:22,column:5}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:27,column:4},end:{line:27,column:5}},loc:{start:{line:27,column:15},end:{line:29,column:5}},line:27},"3":{name:"(anonymous_3)",decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:20},end:{line:41,column:5}},line:34},"4":{name:"(anonymous_4)",decl:{start:{line:46,column:4},end:{line:46,column:5}},loc:{start:{line:46,column:22},end:{line:48,column:5}},line:46},"5":{name:"(anonymous_5)",decl:{start:{line:60,column:4},end:{line:60,column:5}},loc:{start:{line:60,column:25},end:{line:62,column:5}},line:60},"6":{name:"(anonymous_6)",decl:{start:{line:68,column:4},end:{line:68,column:5}},loc:{start:{line:68,column:17},end:{line:77,column:5}},line:68},"7":{name:"(anonymous_7)",decl:{start:{line:70,column:32},end:{line:70,column:33}},loc:{start:{line:70,column:43},end:{line:75,column:9}},line:70},"8":{name:"(anonymous_8)",decl:{start:{line:85,column:4},end:{line:85,column:5}},loc:{start:{line:85,column:23},end:{line:87,column:5}},line:85},"9":{name:"(anonymous_9)",decl:{start:{line:93,column:4},end:{line:93,column:5}},loc:{start:{line:93,column:17},end:{line:102,column:5}},line:93},"10":{name:"(anonymous_10)",decl:{start:{line:95,column:32},end:{line:95,column:33}},loc:{start:{line:95,column:43},end:{line:100,column:9}},line:95}},branchMap:{"0":{loc:{start:{line:36,column:8},end:{line:40,column:55}},type:"if",locations:[{start:{line:36,column:8},end:{line:40,column:55}},{start:{line:36,column:8},end:{line:40,column:55}}],line:36},"1":{loc:{start:{line:71,column:12},end:{line:74,column:13}},type:"if",locations:[{start:{line:71,column:12},end:{line:74,column:13}},{start:{line:71,column:12},end:{line:74,column:13}}],line:71},"2":{loc:{start:{line:96,column:12},end:{line:99,column:13}},type:"if",locations:[{start:{line:96,column:12},end:{line:99,column:13}},{start:{line:96,column:12},end:{line:99,column:13}}],line:96}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},inputSourceMap:{version:3,file:"/home/usuario/Desktop/ull-esit-inf-dsi-23-24-prct06-generics-solid-alu0101413938/src/index.ts",sources:["/home/usuario/Desktop/ull-esit-inf-dsi-23-24-prct06-generics-solid-alu0101413938/src/index.ts"],names:[],mappings:";;;AAqBA,uHAAuH;AACvH,uHAAuH;AACvH,6GAA6G;AAC7G,oEAAoE;AACpE;;;GAGG;AACH,MAAe,oBAAoB;IACjC,YAAsB,KAAU;QAAV,UAAK,GAAL,KAAK,CAAK;IAChC,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,OAAU;QAChB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC1B,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAA;IACnB,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,GAAM;QACf,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACzC,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAC;;YACI,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAClD,CAAC;IAED;;;OAGG;IACH,eAAe;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAA;IAC1B,CAAC;CAGF;AAED,0HAA0H;AAC1H,0HAA0H;AAC1H,yHAAyH;AACzH,gIAAgI;AAChI,4FAA4F;AAC5F;;;GAGG;AACH,MAAa,2BAA4B,SAAQ,oBAA4B;IAC3E,YAAY,OAAiB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAA;IAChB,CAAC;IACD;;;;OAIG;IACH,MAAM,CAAC,IAAY;QACjB,MAAM,MAAM,GAAa,EAAE,CAAA;QAC3B,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAChC,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;gBACpB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACtB,CAAC;QACH,CAAC,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AAnBD,kEAmBC;AAED;;;GAGG;AACH,MAAa,0BAA2B,SAAQ,oBAA4B;IAC1E,YAAY,KAAe;QACzB,KAAK,CAAC,KAAK,CAAC,CAAA;IACd,CAAC;IACD;;;;OAIG;IACH,MAAM,CAAC,IAAY;QACjB,MAAM,MAAM,GAAa,EAAE,CAAA;QAC3B,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAChC,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC3B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACtB,CAAC;QACH,CAAC,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AAnBD,gEAmBC;AAED,MAAM,uBAAuB,GAA+B,IAAI,0BAA0B,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAA;AACtH,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC",sourcesContent:["// Implemente una interfaz gen\xE9rica 'Collectable' con los siguientes m\xE9todos,\n// los cuales deber\xE1 definir toda clase que quiera implementar dicha interfaz: addItem, getItems(), removeItem, getNumberOfItems.\n/**\n * Interfaz generiga Collectable<T>\n * Metodos: addItem, getItems(), removeItem, getNumberOfItem\n */\ninterface Collectable<T> {\n  addItem(item :T) :void\n  getItems() :T[]\n  removeItem(key :T) :void\n  getNumberOfItem() :number\n}\n// Implemente una interfaz gen\xE9rica 'Searchable' con los siguientes m\xE9todos, los cuales deber\xE1 definir toda clase que desee\n// implementar dicha interfaz: search. Este m\xE9todo recibir\xE1 un t\xE9rmino de b\xFAsqueda cuyo tipo no se conoce a priori.\n/**\n * Interfaz generica Searchable<T>\n * Metodos: search\n */\ninterface Searchable<T> {\n  search(item :T) :T[]\n}\n// Implemente una clase abstracta gen\xE9rica 'SearchableCollection' que implemente las interfaces gen\xE9ricas 'Collectable'\n// y 'Searchable'. Tenga en cuenta que en este punto deber\xE1 implementar todos los metodos de la interfaz 'Collectable',\n// mientras que el m\xE9todo search de 'Searchable' ser\xE1 abstracto, de modo que aquellas clases que extiendan a \n// 'SearchableCollection' tengan que implementarlo obligatoriamente.\n/**\n * Clase abstracta que implementa las interfaces Collectable y Searchable\n * Metodos: addItem, removeItem, getNumberOfItem\n */\nabstract class SearchableCollection<T> implements Collectable<T>, Searchable<T> {\n  constructor(protected items: T[]) {\n  }\n  \n  /**\n   * Permite a\xF1adir items\n   * @param newItem item nuevo el cual se va a a\xF1adir\n   */\n  addItem(newItem :T): void {\n    this.items.push(newItem)\n  }\n\n  /**\n   * Metodo que permite obtener el array de items\n   * @returns devuelve el array de items\n   */\n  getItems(): T[] {\n    return this.items \n  }\n\n  /**\n   * Permite eliminar un item dado un indice\n   * @param key indice que hace referencia a una posicion del indice\n   */\n  removeItem(key :T): void {\n    const index = this.items.indexOf(key, 0);\n    if (index > -1) {\n      this.items.splice(index, 1);\n    }\n    else console.log(\"No se pudo eliminar el item\");\n  }\n\n  /**\n   * Permite obtener la cantidad de items del array\n   * @returns devuelve la cantidad de items\n   */\n  getNumberOfItem(): number {\n    return this.items.length\n  }\n\n  abstract search(item: T): T[]\n}\n\n// Extienda la clase abstracta gen\xE9rica 'SearchableCollection' escribiendo dos subclases: 'NumericSearchableCollection' y \n// 'StringSearchableCollection'. La primera deber\xE1 modelar una colecci\xF3n de elementos num\xE9ricos en la que el m\xE9todo search\n// deber\xE1 poder buscar un n\xFAmero concreto y devolver\xE1 un array con todas las ocurrencias de dicho n\xFAmero en la colecci\xF3n.\n// La segunda deber\xE1 modelar una colecci\xF3n de cadenas de caracteres en la que el m\xE9todo search deber\xE1 poder buscar una subcadena\n// y devolver\xE1 un array con todas las cadenas de la colecci\xF3n que contengan dicha subcadena.\n/**\n * Clase NumericSearchableCollection que extiende la clase abstracta SearchableCollection\n * Implementa el metodo search para numbers\n */\nexport class NumericSearchableCollection extends SearchableCollection<number> {\n  constructor(numbers :number[]) {\n    super(numbers)\n  }\n  /**\n   * Permite buscar un numero del array\n   * @param item numero el cual se desea buscar\n   * @returns devuelve las numeros que coinciden\n   */\n  search(item: number): number[] {\n    const result :number[] = []\n    this.getItems().forEach(element => {\n      if (element == item) {\n        console.log(element);\n        result.push(element)\n      }\n    })\n    return result\n  }\n}\n\n/**\n * Clase StringSearchableCollection que extiende la clase abstracta SearchableCollection\n * Implementa el metodo search numbers\n */\nexport class StringSearchableCollection extends SearchableCollection<string> {\n  constructor(words :string[]) {\n    super(words)\n  }\n  /**\n   * Permite buscar todas las cadenas que concuerden con la subcadena\n   * @param item subcadena para buscar\n   * @returns devuelve las cadenas que coinciden\n   */\n  search(item: string): string[] {\n    const result :string[] = []\n    this.getItems().forEach(element => {\n      if (element.includes(item)) {\n        console.log(element);\n        result.push(element)\n      }\n    })\n    return result\n  }\n}\n\nconst strSearchableCollection :StringSearchableCollection = new StringSearchableCollection([\"hola\", \"volar\", \"adios\"]) \nconsole.log(strSearchableCollection.search(\"ola\"));\n\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"86aeca44f00323d80eed1ffcb5c7ac52bb328249"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_18cin31i6j=function(){return actualCoverage;};}return actualCoverage;}cov_18cin31i6j();cov_18cin31i6j().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});cov_18cin31i6j().s[1]++;exports.StringSearchableCollection=exports.NumericSearchableCollection=void 0;// Implemente una clase abstracta genérica 'SearchableCollection' que implemente las interfaces genéricas 'Collectable'
// y 'Searchable'. Tenga en cuenta que en este punto deberá implementar todos los metodos de la interfaz 'Collectable',
// mientras que el método search de 'Searchable' será abstracto, de modo que aquellas clases que extiendan a 
// 'SearchableCollection' tengan que implementarlo obligatoriamente.
/**
 * Clase abstracta que implementa las interfaces Collectable y Searchable
 * Metodos: addItem, removeItem, getNumberOfItem
 */class SearchableCollection{constructor(items){cov_18cin31i6j().f[0]++;cov_18cin31i6j().s[2]++;this.items=items;}/**
     * Permite añadir items
     * @param newItem item nuevo el cual se va a añadir
     */addItem(newItem){cov_18cin31i6j().f[1]++;cov_18cin31i6j().s[3]++;this.items.push(newItem);}/**
     * Metodo que permite obtener el array de items
     * @returns devuelve el array de items
     */getItems(){cov_18cin31i6j().f[2]++;cov_18cin31i6j().s[4]++;return this.items;}/**
     * Permite eliminar un item dado un indice
     * @param key indice que hace referencia a una posicion del indice
     */removeItem(key){cov_18cin31i6j().f[3]++;const index=(cov_18cin31i6j().s[5]++,this.items.indexOf(key,0));cov_18cin31i6j().s[6]++;if(index>-1){cov_18cin31i6j().b[0][0]++;cov_18cin31i6j().s[7]++;this.items.splice(index,1);}else{cov_18cin31i6j().b[0][1]++;cov_18cin31i6j().s[8]++;console.log("No se pudo eliminar el item");}}/**
     * Permite obtener la cantidad de items del array
     * @returns devuelve la cantidad de items
     */getNumberOfItem(){cov_18cin31i6j().f[4]++;cov_18cin31i6j().s[9]++;return this.items.length;}}// Extienda la clase abstracta genérica 'SearchableCollection' escribiendo dos subclases: 'NumericSearchableCollection' y 
// 'StringSearchableCollection'. La primera deberá modelar una colección de elementos numéricos en la que el método search
// deberá poder buscar un número concreto y devolverá un array con todas las ocurrencias de dicho número en la colección.
// La segunda deberá modelar una colección de cadenas de caracteres en la que el método search deberá poder buscar una subcadena
// y devolverá un array con todas las cadenas de la colección que contengan dicha subcadena.
/**
 * Clase NumericSearchableCollection que extiende la clase abstracta SearchableCollection
 * Implementa el metodo search para numbers
 */class NumericSearchableCollection extends SearchableCollection{constructor(numbers){cov_18cin31i6j().f[5]++;cov_18cin31i6j().s[10]++;super(numbers);}/**
     * Permite buscar un numero del array
     * @param item numero el cual se desea buscar
     * @returns devuelve las numeros que coinciden
     */search(item){cov_18cin31i6j().f[6]++;const result=(cov_18cin31i6j().s[11]++,[]);cov_18cin31i6j().s[12]++;this.getItems().forEach(element=>{cov_18cin31i6j().f[7]++;cov_18cin31i6j().s[13]++;if(element==item){cov_18cin31i6j().b[1][0]++;cov_18cin31i6j().s[14]++;console.log(element);cov_18cin31i6j().s[15]++;result.push(element);}else{cov_18cin31i6j().b[1][1]++;}});cov_18cin31i6j().s[16]++;return result;}}cov_18cin31i6j().s[17]++;exports.NumericSearchableCollection=NumericSearchableCollection;/**
 * Clase StringSearchableCollection que extiende la clase abstracta SearchableCollection
 * Implementa el metodo search numbers
 */class StringSearchableCollection extends SearchableCollection{constructor(words){cov_18cin31i6j().f[8]++;cov_18cin31i6j().s[18]++;super(words);}/**
     * Permite buscar todas las cadenas que concuerden con la subcadena
     * @param item subcadena para buscar
     * @returns devuelve las cadenas que coinciden
     */search(item){cov_18cin31i6j().f[9]++;const result=(cov_18cin31i6j().s[19]++,[]);cov_18cin31i6j().s[20]++;this.getItems().forEach(element=>{cov_18cin31i6j().f[10]++;cov_18cin31i6j().s[21]++;if(element.includes(item)){cov_18cin31i6j().b[2][0]++;cov_18cin31i6j().s[22]++;console.log(element);cov_18cin31i6j().s[23]++;result.push(element);}else{cov_18cin31i6j().b[2][1]++;}});cov_18cin31i6j().s[24]++;return result;}}cov_18cin31i6j().s[25]++;exports.StringSearchableCollection=StringSearchableCollection;const strSearchableCollection=(cov_18cin31i6j().s[26]++,new StringSearchableCollection(["hola","volar","adios"]));cov_18cin31i6j().s[27]++;console.log(strSearchableCollection.search("ola"));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,